# Unified Kubernetes Manifest Bundle for SailPoint IdentityIQ on K3s (aligned with Compose)

# --- SailPoint Secrets ---
# Recommended method: use kubectl create secret ...
# For example:
# kubectl create secret generic sailpoint-db-secrets \
#   --from-literal=mssql-sa-password='id3ntityIQ!-TQ8BaiOxKAL4v-4lCIxVx' \
#   --from-literal=mssql-user-password='id3ntityIQ!-TQ8BaiOxKAL4v-4lCIxVx' \
#   --from-literal=mysql-root-password='password' \
#   --from-literal=mysql-user-password='identityiq' \
#   --from-literal=ldap-admin-password='spadmin' \
#   --from-literal=ssh-password='password'
# (Adjust passwords and key names to match your actual secret)

# OR, less secure, keep the YAML here for simplicity (REMOVE sensitive data in production!)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: sailpoint-db-secrets
# type: Opaque
# stringData: # Using stringData for readability - only in non-production/testing!
#   mssql-sa-password: "id3ntityIQ!-TQ8BaiOxKAL4v-4lCIxVx"
#   mssql-user-password: "id3ntityIQ!-TQ8BaiOxKAL4v-4lCIxVx" # Password for identityiq user in MSSQL
#   mysql-root-password: "password"
#   mysql-user-password: "identityiq" # Password for identityiq user in MySQL
#   ldap-admin-password: "spadmin"
#   ssh-password: "password"
#   # Removed mysql_database key as the variable name is MYSQL_DATABASE

---
# --- LDAP StatefulSet (aligned name) ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ldap # Matches compose service name
spec:
  replicas: 1
  serviceName: ldap # Matches the Service name
  selector:
    matchLabels:
      app: ldap
  template:
    metadata:
      labels:
        app: ldap
    spec:
      enableServiceLinks: false
      containers:
      - name: ldap
        image: osixia/openldap:1.5.0
        ports:
        - containerPort: 389
        env:
        - name: LDAP_DOMAIN # Env var name expected by the image
          value: sailpoint.demo
        - name: LDAP_ORGANISATION # Env var name expected by the image
          value: Sailpoint Demo
        - name: LDAP_ADMIN_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: ldap-admin-password # Key in your Secret
        volumeMounts:
        - name: ldap-persistent-storage
          mountPath: /var/lib/ldap
        - name: ldap-persistent-storage # Or a specific subpath if image requires it
          mountPath: /etc/ldap/slapd.d
  volumeClaimTemplates:
  - metadata:
      name: ldap-persistent-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: local-path

---
# LDAP Service (aligned name, exposes compose external port 1389 internally as well)
apiVersion: v1
kind: Service
metadata:
  name: ldap # Matches compose service name
spec:
  selector:
    app: ldap
  ports:
  - name: ldap-int # Name for clarity
    protocol: TCP
    port: 389 # Internal service port
    targetPort: 389 # Container port
  # Add NodePort or LoadBalancer service specifically for 1389 mapping if external direct access needed
  # - name: ldap-ext # If you needed external access on 1389
  #   protocol: TCP
  #   port: 1389
  #   targetPort: 389 # Maps 1389 Service port to 389 Container port
  # type: NodePort # Example type if using ldap-ext port

---
# --- phpLDAPadmin Deployment (aligned name) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpldapadmin # Matches compose service name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: phpldapadmin
  template:
    metadata:
      labels:
        app: phpldapadmin
    spec:
      containers:
      - name: phpldapadmin
        image: osixia/phpldapadmin
        ports:
        - containerPort: 443
        env:
        - name: PHPLDAPADMIN_LDAP_HOSTS # Env var name expected by the image
          value: ldap # Refers to the 'ldap' K8s Service name
---
# phpLDAPadmin Service (aligned name)
apiVersion: v1
kind: Service
metadata:
  name: phpldapadmin # Matches compose service name
spec:
  selector:
    app: phpldapadmin
  ports:
  - protocol: TCP
    port: 443
    targetPort: 443
  # Add Ingress or NodePort service for external access on compose port 8443 if needed

---
# --- Mailpit StatefulSet (aligned name) ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mail # Matches compose service name
spec:
  replicas: 1
  serviceName: mail # Matches the Service name
  selector:
    matchLabels:
      app: mail
  template:
    metadata:
      labels:
        app: mail # Use the new app label
    spec:
      containers:
      - name: mailpit # Container name can be anything, often same as resource or image name
        image: axllent/mailpit
        ports:
        - containerPort: 1025
        - containerPort: 8025
        env:
        - name: MP_MAX_MESSAGES
          value: "5000"
        - name: MP_DATABASE
          value: "/data/mailpit.db" # Path within the container, data mounted from volume
        - name: MP_SMTP_AUTH_ACCEPT_ANY
          value: "1"
        - name: MP_SMTP_AUTH_ALLOW_INSECURE
          value: "1"
        volumeMounts:
        - name: mail-persistent-storage # Name derived from StatefulSet template name
          mountPath: /data # Mount path used by Mailpit image
  volumeClaimTemplates:
  - metadata:
      name: mail-persistent-storage # This name is referenced in volumeMounts
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: local-path

---
# Mailpit Service (aligned name, exposes compose ports)
apiVersion: v1
kind: Service
metadata:
  name: mail # Matches compose service name, used for internal IIQ connections (MAIL_HOST=mail)
spec:
  selector:
    app: mail # Selects pods managed by the 'mail' StatefulSet
  ports:
  - name: smtp
    protocol: TCP
    port: 1025 # Service port
    targetPort: 1025 # Container port (matching compose)
  - name: http
    protocol: TCP
    port: 8025 # Service port (matching compose variable default)
    targetPort: 8025 # Container port (matching compose)
  # Consider adding NodePort or LoadBalancer here or use Ingress for 8025 external access

---
# --- MSSQL Database StatefulSet (aligned name) ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db # Matches compose service name 'db'
spec:
  replicas: 1
  serviceName: db # Matches the Service name
  selector:
    matchLabels:
      app: db # Use the new app label
  template:
    metadata:
      labels:
        app: db # Use the new app label
    spec:
      containers:
      - name: mssql # Container name (can keep it distinct from Service/StatefulSet name)
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
        - containerPort: 1433
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: MSSQL_SA_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mssql-sa-password # Key in your Secret
        - name: MSSQL_PID
          value: Developer
        # IIQ might require creation of specific users/DBs - this is done by iiq-init or setup process
        volumeMounts:
        - name: mssql-persistent-storage
          mountPath: /var/opt/mssql
  volumeClaimTemplates:
  - metadata:
      name: mssql-persistent-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: local-path

---
# MSSQL Service (aligned name)
apiVersion: v1
kind: Service
metadata:
  name: db # Matches compose service name 'db', used by IIQ (MSSQL_HOST=db)
spec:
  selector:
    app: db # Selects pods managed by the 'db' StatefulSet
  ports:
  - protocol: TCP
    port: 1433
    targetPort: 1433

---
# --- MySQL Database StatefulSet (aligned name) ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-mysql # Matches compose service name 'db_mysql'
spec:
  replicas: 1
  serviceName: db-mysql # Matches the Service name
  selector:
    matchLabels:
      app: db-mysql # Use the new app label
  template:
    metadata:
      labels:
        app: db-mysql # Use the new app label
    spec:
      containers:
      - name: mysql # Container name
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mysql-root-password # Key in your Secret
        - name: MYSQL_DATABASE # Env var name expected by the image
          value: identityiq # Matches value from compose/IIQ expectations
        - name: MYSQL_USER # Env var name expected by the image
          value: identityiq # Matches value from compose/IIQ expectations
        - name: MYSQL_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mysql-user-password # Key in your Secret
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: local-path

---
# MySQL Service (aligned name)
apiVersion: v1
kind: Service
metadata:
  name: db-mysql # Matches compose service name 'db_mysql', used by IIQ (MYSQL_HOST=db-mysql)
spec:
  selector:
    app: db-mysql # Selects pods managed by the 'db-mysql' StatefulSet
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306

---
# --- ActiveMQ Artemis Deployment (aligned name) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: activemq # Matches compose service name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: activemq
  template:
    metadata:
      labels:
        app: activemq
    spec:
      containers:
      - name: activemq # Container name
        image: apache/activemq-artemis:latest-alpine
        ports:
        - containerPort: 8161
        # Note: No volumeMounts defined here - add if ActiveMQ needs persistence

---
# ActiveMQ Service (aligned name)
apiVersion: v1
kind: Service
metadata:
  name: activemq # Matches compose service name, used by IIQ (ACTIVEMQ_HOST=activemq)
spec:
  selector:
    app: activemq
  ports:
  - protocol: TCP
    port: 8161
    targetPort: 8161

---
# --- IdentityIQ Init Job (aligned name, secret refs, service names) ---
apiVersion: batch/v1
kind: Job
metadata:
  name: iiq-init # Matches compose service name
spec:
  template:
    metadata:
      labels:
        app: iiq-init
    spec:
      restartPolicy: Never
      initContainers: # Retained and using updated service names
      - name: wait-for-dbs
        image: busybox
        command: ['sh', '-c', 'until nc -z db 1433; do echo waiting for db; sleep 2; done; until nc -z db-mysql 3306; do echo waiting for db-mysql; sleep 2; done; until nc -z ldap 389; do echo waiting for ldap; sleep 2; done; until nc -z mail 1025; do echo waiting for mail; sleep 2; done;']
      containers:
      - name: iiq-init # Container name
        image: 192.168.0.236:5000/sailpoint-docker:latest # Your pre-built IIQ image
        env:
        - name: DATABASE_TYPE # Env var name expected by the image/script
          value: "mssql" # Match your IIQ configuration (${IIQ_DB_TYPE:-mssql})
        # MSSQL Config (using Secret references and service names)
        - name: MSSQL_HOST # Env var name expected by the image/script
          value: db # Refers to the 'db' K8s Service name
        - name: MSSQL_SA_USER # Env var name expected by the image/script
          value: sa
        - name: MSSQL_SA_PASSWORD # Env var name expected by the image/script
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mssql-sa-password # Key in your Secret

        # MySQL Config (using Secret references and service names, if DATABASE_TYPE is mysql)
        - name: MYSQL_HOST # Env var name expected by the image/script
          value: db-mysql # Refers to the 'db-mysql' K8s Service name
        - name: MYSQL_USER # Env var name expected by the image/script
          value: identityiq
        - name: MYSQL_PASSWORD # Env var name expected by the image/script
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mysql-user-password # Key in your Secret
        - name: MYSQL_DATABASE # Env var name expected by the image/script
          value: identityiq

        - name: INIT # Trigger initialization
          value: "y" # Matches compose
        # Dependency Hosts (referencing K8s Service names)
        - name: LDAP_HOST # Env var name expected by the image/script
          value: ldap
        - name: MAIL_HOST # Env var name expected by the image/script
          value: mail # Refers to the 'mail' K8s Service name
        - name: ACTIVEMQ_HOST # Env var name expected by the image/script
          value: activemq

---
# --- IdentityIQ Deployment (aligned name, secret refs, service names) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iiq # Matches compose service name
spec:
  replicas: 2 # Matches compose replicas default
  selector:
    matchLabels:
      app: iiq # Use the new app label
  strategy:
    type: Recreate # Useful strategy, consider RollingUpdate for zero-downtime
  template:
    metadata:
      labels:
        app: iiq # Use the new app label
        # Add labels here if needed for Traefik IngressRule matching
        # Example: "traefik.enable": "true" # Might not be needed if using annotations
    spec:
      initContainers: # Retained, wait for iiq-init job completion
      - name: wait-for-init-job
        image: busybox
        command: ['sh', '-c', 'while ! kubectl get job iiq-init -o=jsonpath="{.status.conditions[?(@.type == \"Complete\")].status}" | grep -q "True"; do echo waiting for iiq-init job; sleep 5; done;']
      containers:
      - name: iiq # Container name
        image: 192.168.0.236:5000/sailpoint-docker:latest # Your pre-built IIQ image
        ports:
        - containerPort: 8080 # Assuming IIQ serves on 8080
        env:
        - name: DATABASE_TYPE # Env var name expected by the image
          value: "mssql" # Match your IIQ configuration (${IIQ_DB_TYPE:-mssql})
        # MSSQL Config (using Secret references and service names)
        - name: MSSQL_HOST # Env var name expected by the image
          value: db # Refers to the 'db' K8s Service name
        - name: MSSQL_SA_USER # Env var name expected by the image
          value: sa
        - name: MSSQL_SA_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mssql-sa-password # Key in your Secret
        - name: MSSQL_USER # Env var name expected by the image
          value: identityiq
        - name: MSSQL_PASS # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mssql-user-password # Key in your Secret (assuming IIQ app uses 'identityiq' user)

        # MySQL Config (using Secret references and service names, if DATABASE_TYPE is mysql)
        - name: MYSQL_HOST # Env var name expected by the image
          value: db-mysql # Refers to the 'db-mysql' K8s Service name
        - name: MYSQL_USER # Env var name expected by the image
          value: identityiq
        - name: MYSQL_PASSWORD # Env var name expected by the image
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mysql-user-password # Key in your Secret
        - name: MYSQL_DATABASE # Env var name expected by the image
          value: identityiq
        - name: MYSQL_ROOT_PASSWORD # Sometimes needed even for app connection logic
          valueFrom:
            secretKeyRef:
              name: sailpoint-db-secrets
              key: mysql-root-password

        # Dependency Hosts (referencing K8s Service names)
        - name: LDAP_HOST # Env var name expected by the image
          value: ldap
        - name: MAIL_HOST # Env var name expected by the image
          value: mail # Refers to the 'mail' K8s Service name
        - name: ACTIVEMQ_HOST # Env var name expected by the image
          value: activemq

        - name: CATALINA_OPTS # Env var name expected by the image
          value: -Xmx2048M
        # No INIT=y here!
        # Consider adding liveness/readiness probes

---
# IdentityIQ Service (aligned name)
apiVersion: v1
kind: Service
metadata:
  name: iiq # Matches compose service name, used by Ingress
spec:
  selector:
    app: iiq # Selects pods managed by the 'iiq' Deployment
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---
# --- Traefik IngressRoute for IdentityIQ (aligned name, updated service) ---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: iiq-ingress # Aligned naming
spec:
  entryPoints:
    - web # Adjust if using different entrypoint (e.g., websecure)
  routes:
  - match: PathPrefix(`/identityiq`)
    kind: Rule
    services:
    - name: iiq # Points to the 'iiq' K8s Service name
      port: 8080
      sticky: # Ensure your Traefik version/setup supports this
        cookie: {}

---
# --- Traefik IngressRoute for ActiveMQ (aligned name, updated service) ---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: activemq-ingress # Aligned naming
spec:
  entryPoints:
    - web # Adjust if using different entrypoint (e.g., websecure)
  routes:
  - match: PathPrefix(`/activemq`)
    kind: Rule
    services:
    - name: activemq # Points to the 'activemq' K8s Service name
      port: 8161 # Points to the HTTP admin port

# Add IngressRoute for phpldapadmin (port 443 or 8443 depending on Traefik config) and Mailpit (port 8025) if needed
# Example phpldapadmin ingress
# ---
# apiVersion: traefik.io/v1alpha1
# kind: IngressRoute
# metadata:
#   name: phpldapadmin-ingress
# spec:
#   entryPoints:
#     - websecure # Often serves on HTTPS
#   routes:
#   - match: PathPrefix(`/phpldapadmin`) # Or another path/host
#     kind: Rule
#     services:
#     - name: phpldapadmin
#       port: 443 # Service port