apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: audiobooks-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust size as needed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: podcasts-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust size as needed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: config-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi  # Adjust size as needed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: metadata-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi  # Adjust size as needed
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audiobookshelf
  labels:
    app: audiobookshelf
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audiobookshelf
  template:
    metadata:
      labels:
        app: audiobookshelf
    spec:
      containers:
      - name: audiobookshelf
        image: ghcr.io/advplyr/audiobookshelf:latest
        ports:
        - containerPort: 80
        env:
        - name: TZ
          value: "America/Toronto"
        volumeMounts:
        - name: audiobooks
          mountPath: /audiobooks
        - name: podcasts
          mountPath: /podcasts
        - name: config
          mountPath: /config
        - name: metadata
          mountPath: /metadata
      volumes:
      - name: audiobooks
        persistentVolumeClaim:
          claimName: audiobooks-pvc
      - name: podcasts
        persistentVolumeClaim:
          claimName: podcasts-pvc
      - name: config
        persistentVolumeClaim:
          claimName: config-pvc
      - name: metadata
        persistentVolumeClaim:
          claimName: metadata-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: audiobookshelf
spec:
  selector:
    app: audiobookshelf
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: audiobookshelf-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
    # Make path-based routing work without specifying a host
    traefik.ingress.kubernetes.io/router.priority: "100"
spec:
  rules:
  - http:
      paths:
      - path: /audiobookshelf
        pathType: Prefix
        backend:
          service:
            name: audiobookshelf
            port:
              number: 80